(function() {
  var Converter, spawn;

  spawn = require('child_process').spawn;

  Converter = (function() {

    module.exports = Converter;

    function Converter(_arg) {
      var _ref;
      _ref = _arg != null ? _arg : {}, this.height = _ref.height, this.width = _ref.width, this.format = _ref.format, this.images = _ref.images, this.quality = _ref.quality, this.delay = _ref.delay, this.javascript = _ref.javascript, this.fileAccess = _ref.fileAccess;
      if (this.images == null) this.images = true;
      if (this.javascript == null) this.javascript = true;
      if (this.fileAccess == null) this.fileAccess = true;
    }

    Converter.prototype._generateArguments = function(input, output) {
      var args;
      args = [];
      if (this.width != null) {
        args.push("--width");
        args.push(this.width);
        args.push("--disable-smart-width");
      }
      if (this.height != null) {
        args.push('--height');
        args.push(this.height);
      }
      if (this.format != null) {
        args.push('--format');
        args.push(this.format);
      }
      if (this.images === false) args.push('--no-images');
      if (this.javascript === false) args.push('--disable-javascript');
      if (this.quality != null) {
        args.push('--quality');
        args.push(this.quality);
      }
      if (this.delay != null) {
        args.push('--javascript-delay');
        args.push(this.delay);
      }
      if (this.fileAccess === false) args.push('--disable-local-file-access');
      args.push(input);
      args.push(output);
      return args;
    };

    Converter.prototype.process = function(input, output, cb) {
      var process, stderr;
      process = spawn('wkhtmltoimage', this._generateArguments(input, output));
      stderr = '';
      process.stderr.on('data', function(chunk) {
        return stderr += chunk;
      });
      return process.on('exit', function(code) {
        if (code !== 0) return cb(new Error('WkhtmlToImage: ' + code), stderr);
        return cb(null, stderr);
      });
    };

    return Converter;

  })();

}).call(this);
